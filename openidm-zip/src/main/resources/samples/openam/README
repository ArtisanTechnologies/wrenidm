This sample shows how to do integration between OpenIDM and OpenAM to provide a single-sign on dashboard.

It is assumed you have a basic installation of OpenAM already installed and accessible by the OpenIDM server.

The basic setup changes the default installation in several important ways. Each section below describes the 
necessary steps.

Setup of OpenAM auth filter for OpenIDM
=======================================

Set Location of Agent Configuration Repository: local 
Manually add openidm-admin user to AM

Setup of a reverse proxy to serve modified UI
=============================================
In this example, the reverse proxy used is Apache 2, however the same functionality could be done with other
web servers so long as they perform the same functions. There are three configuration changes that need to be made
to a default apache installation: 

 1) Setting the DocumentRoot to the appropriate copy of the UI:
 
    DocumentRoot /path/to/openidm/samples/openam/openidm-ui-ria-openam/
    (You may need to adjust the related 'Directory' tag as well to match this setting)
    
 2) Setting a reverse proxy for OpenIDM
 
    ProxyPass /openidm http://yourIDMServer:8080/openidm
    ProxyPassReverse /openidm http://yourIDMServer:8080/openidm
    
 3) Setting a reverse proxy for OpenAM
 
    ProxyPass /openam http://yourAMServer:8080/openam
    ProxyPassReverse /openam http://yourAMServer:8080/openam

These settings can either be made globally or within a VirtualHost configuration. Now the cusomized UI built for this
sample will be accessible via your web server.

Start the OpenAM Sample
=======================

From your openidm root folder, run this command:
./startup.sh -p samples/openam/ -c samples/openam/bin/launcher.json 

Setup of provisioning to external systems
=========================================
With the above completed, your OpenIDM system is ready to serve the Single-Sign On Dashboard UI supported by OpenAM. For this to 
perform useful tasks, however, Dashboard application entries must be defined in OpenAM for users to choose from.  These can be any
URL+Icon+Name, however it should be some location that a user with a valid SSO token to that OpenAM instance can make use of.  For
example, this could be an internal application that is secured with the same OpenAM instance.  Another example is a cloud application
that works with SAML2 or OAuth; in this case the URL will need to be to the OpenAM endpoint which handles the authentication setup to 
that cloud application.  Simply providing a link to these applications is of limited value, however.  The real power of the SSO dashboard
starts to become apparent when OpenIDM is also provisioning users into these same applications. The provisioning necessarily is highly-site
specific, and so must be done by the implementor as an addition to this sample setup.  The main additions that will be necessary are:
    1) conf/provisioner.<remoteSystem>.json
        New file providing configuration necessary to work with remote system
    2) conf/schedule-reconcile_system<remoteSystem>Users_managedUser.json
        New file to determine how often the remote system is reconciled with managed/users
    3) conf/sync.json
        Update to sample file which defines how to map managed/user properties to remote system properties
    4) script/<remoteSystem>BackCorrelationQuery.js
        New file used to populate query parameters as part of the reconciliation process