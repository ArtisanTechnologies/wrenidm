<?xml version="1.0" encoding="UTF-8"?>
<definitions name="idmModel"
    targetNamespace="http://openidm.forgerock.com/xml/ns/idmModel/wsdl/1#"
    xmlns:tns="http://openidm.forgerock.com/xml/ns/idmModel/wsdl/1#"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype"
    xmlns:c="http://openidm.forgerock.com/xml/ns/common/1#"
    xmlns:cw="http://openidm.forgerock.com/xml/ns/common/object/wsdl/1#"
    xmlns:idm="http://openidm.forgerock.com/xml/ns/identity/1#">

    <documentation>
        TODO

        This interface is an extension of generic Object Access Interface. However due
        to the WSDL limitations some parts of the definition (e.g. operations)
        are copied&amp;pasted instead of re-used.

        Supported object types:
          All object types from Common Schema
          All object types from Identity Schema

    </documentation>

  
    <types>
        <xsd:schema targetNamespace="http://openidm.forgerock.com/xml/ns/idmModel/wsdl/1#">

            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/common/1#" schemaLocation="../common/common.xsd"/>
            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/identity/1#" schemaLocation="../repository/identity.xsd"/>


        </xsd:schema>
    </types>

    <!-- OBJECT messages -->

    <!-- Common messages
         Following messages should be in a separate WSDL file and imported here.
         But that does not work on OpenESB. Therefore good old copy&paste
         instead of import -->

        <message name="addObjectRequest">
        <part name="objectContainer" type="c:ObjectContainerType">
            <documentation>
                Container with the Objectto be created.
                OID attribute of the object may be empty.
            </documentation>
        </part>
    </message>
    <message name="addObjectResponse">
        <part name="oid" type="xsd:string">
            <documentation>
                OID assigned to the created object.
            </documentation>
        </part>
    </message>

    <message name="getObjectRequest">
        <part name="oid" type="xsd:string"/>
        <part name="resolve" type="c:PropertyReferenceListType"/>
    </message>
    <message name="getObjectResponse">
        <part name="objectContainer" type="c:ObjectContainerType"/>
    </message>

    <message name="listObjectsRequest">
        <part name="objectType" type="xsd:anyURI">
            <documentation>
                Object type to list.
            </documentation>
        </part>
    </message>
    <message name="listObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
    </message>

    <message name="searchObjectsRequest">
        <part name="filter" type="c:FilterType">
            <documentation>
                Search criteria
            </documentation>
        </part>
    </message>
    <message name="searchObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
    </message>

    <message name="modifyObjectRequest">
        <part name="objectChange" type="c:ObjectChangeType"/>
    </message>
    <message name="modifyObjectResponse">
    </message>

    <message name="deleteObjectRequest">
        <part name="oid" type="xsd:string"/>
    </message>
    <message name="deleteObjectResponse">
    </message>

    <message name="getPropertyAvailableValuesRequest">
        <part name="oid" type="xsd:string"/>
        <part name="properties" type="c:PropertyReferenceListType"/>
    </message>
    <message name="getPropertyAvailableValuesResponse">
        <part name="propertyAvailableValuesList" type="c:PropertyAvailableValuesListType"/>
    </message>

    <message name="faultMessage">
        <part name="fault" element="c:fault"/>
    </message>

    <!-- End of common messages -->

    <message name="listAccountShadowOwnerRequest">
        <part name="accountOid" type="xsd:string"/>
    </message>
    <message name="listAccountShadowOwnerResponse">
        <part name="userContainer" type="idm:UserContainerType"/>
    </message>

    <message name="listResourceObjectShadowsRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="resourceObjectShadowType" type="xsd:anyURI"/>
    </message>
    <message name="listResourceObjectShadowsResponse">
        <part name="resourceObjectShadowList" type="idm:ResourceObjectShadowListType"/>
    </message>

    <!-- USER messages -->

    <message name="addUserRequest">
        <part name="userContainer" type="idm:UserContainerType">
            <documentation>
                Container with the User object to be created.
                OID attribute of User object may be empty.
            </documentation>
        </part>
    </message>
    <message name="addUserResponse">
        <part name="oid" type="xsd:string">
            <documentation>
                OID assigned to the created object.
            </documentation>
        </part>
    </message>

    <message name="getUserRequest">
        <part name="oid" type="xsd:string"/>
    </message>
    <message name="getUserResponse">
        <part name="userContainer" type="idm:UserContainerType"/>
    </message>

    <message name="listUsersRequest">
    </message>
    <message name="listUsersResponse">
        <part name="userList" type="idm:UserListType"/>
    </message>

    <message name="modifyUserRequest">
        <part name="objectChange" type="c:ObjectChangeType"/>
    </message>
    <message name="modifyUserResponse">
    </message>

    <message name="deleteUserRequest">
        <part name="oid" type="xsd:string"/>
    </message>
    <message name="deleteUserResponse">
    </message>

    <portType name="idmModelPortType">

        <!-- OBJECT operations -->

        <operation name="addObject">
            <documentation>
                Add new object.

                The OID provided in the input message may be empty. In that case
                the OID will be assigned by the implementation of this method
                and it will be provided as return value.

                This operation should fail if such object already exists (if
                object with the provided OID already exists).

                The operation may fail if provided OID is in an unusable format
                for the storage. Generating own OIDs and providing them to this
                method is not recommended for normal operation.

                Should be atomic. Should not allow creation of two objects with
                the same OID (even if created in parallel).

                The operation may fail if the object to be created does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                Faults:
                  any SystemFaultType
                  ObjectAlreadyExistsFaultType
                  IllegalArgumentFaultType: wrong OID format
                  SchemaViolationFaultType: provided object violates datastore schema
            </documentation>
            <input name="addObjectInput" message="tns:addObjectRequest"/>
            <output name="addObjectOutput" message="tns:addObjectResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getObject">
            <documentation>
                    Returns object for provided OID.
                    Must fail if object with the OID does not exists.

                    Reference resolution is SUPPORTED by this operation.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="getObjectInput" message="tns:getObjectRequest"/>
            <output name="getObjectOutput" message="tns:getObjectResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listObjects">
            <documentation>
                    Returns all objects of specified type in the repository.
                    Not very practical, but good for now.
                    Will be improved later.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
            </documentation>
            <input name="listObjectsInput" message="tns:listObjectsRequest"/>
            <output name="listObjectsOutput" message="tns:listObjectsResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="searchObjects">
            <documentation>
                    Search for objects in the repository. Searches through all
                    object types. Returns a list of objects that match search
                    criteria.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      SchemaViolationFaultType: unknown property used in search query
            </documentation>
            <input name="searchObjectsInput" message="tns:searchObjectsRequest"/>
            <output name="searchObjectsOutput" message="tns:searchObjectsResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="modifyObject">
            <documentation>
                Modifies object using relative change description.
                Must fail if user with provided OID does not exists.
                Must fail if any of the described changes cannot be applied.
                Should be atomic.

                If two or more modify operations are executed in parallel, the
                operations should be merged. In case that the operations are in
                conflict (e.g. one operation adding a value and the other
                removing the same value), the result is not deterministic.

                The operation may fail if the modified object does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                TODO: optimistic locking

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
                      InapplicableOperationFaultType: decribed change is not applicable
                      SchemaViolationFaultType: resulting object would violate datastore schema
            </documentation>
            <input name="modifyObjectInput" message="tns:modifyObjectRequest"/>
            <output name="modifyObjectOutput" message="tns:modifyObjectResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="deleteObject">
            <documentation>
                    Deleted object with provided OID.
                    Must fail if object with specified OID does not exists.
                    Should be atomic.

                    Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="deleteObjectInput" message="tns:deleteObjectRequest"/>
            <output name="deleteObjectOutput" message="tns:deleteObjectResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getPropertyAvailableValues">
            <documentation>
                Returns list of available values for specified properties.

                The returned values can be used as valid values for properties
                of the specific object. The provided values can be used e.g.
                for listing them in GUI list boxes, for early validation
                (pre-validation), displaying help messages, auto-complete, etc.

                In case the list of available values is too big or it is not
                available, the empty list should be returned, setting the
                "closed" flag to false.

                This optional operation is SUPPORTED by this interface.

                Faults:
                      any SystemFaultType
                      UnsupportedObjectTypeFaultType: specified object type is not supported by the interface
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="getPropertyAvailableValuesInput" message="tns:getPropertyAvailableValuesRequest"/>
            <output name="getPropertyAvailableValuesOutput" message="tns:getPropertyAvailableValuesResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <!-- Type-specific operations -->

        <operation name="listAccountShadowOwner">
            <documentation>
                Returns the User object representing owner of specified account
                (account shadow).
                May return (null?? empty??) object if there is no owner
                specified for the account.

                Implements the backward "owns" assosciation between account
                shadow and user. Forward assiciation is implemented by property
                "account" of user object.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listAccountShadowOwnerInput" message="tns:listAccountShadowOwnerRequest"/>
            <output name="listAccountShadowOwnerOutput" message="tns:listAccountShadowOwnerResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listResourceObjectShadows">
            <documentation>
                Search for resource object shadows of a specified type that
                belong to the specified resource. Returns a list of such object
                shadows or empty list if nothing was found.

                Implements the backward "has" assosciation between resource and
                resource object shadows. Forward assiciation is implemented by
                property "resource" of resource object shadow.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listResourceObjectShadowsInput" message="tns:listResourceObjectShadowsRequest"/>
            <output name="listResourceObjectShadowsOutput" message="tns:listResourceObjectShadowsResponse"/>
            <fault name="fault" message="tns:faultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <!-- USER operations -->
        <!-- Following operations are for convenience only. We may add some more
             of these later. Or maybe remove all of them. We will see when we
             gain more experience. -->

        <operation name="addUser">
            <documentation>
                Add new user object.

                The OID provided in the input message may be empty. In that case
                the OID will be assigned by the implementation of this method
                and it will be provided as return value.

                This operation should fail if such object already exists (if
                object with the provided OID already exists).
                
                The operation may fail if provided OID is in an unusable format
                for the storage. Generating own OIDs and providing them to this
                method is not recommended for normal operation.

                Should be atomic. Should not allow creation of two objects with
                the same OID (even if created in parallel).

                The operation may fail if the object to be created does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.
            </documentation>
            <input name="addUserInput" message="tns:addUserRequest"/>
            <output name="addUserOutput" message="tns:addUserResponse"/>
        </operation>

        <operation name="getUser">
            <documentation>
                    Returns User object for provided OID.
                    Must fail if object with the OID does not exists or if it
                    is of the wrong type.
            </documentation>
            <input name="getUserInput" message="tns:getUserRequest"/>
            <output name="getUserOutput" message="tns:getUserResponse"/>
        </operation>

        <operation name="listUsers">
            <documentation>
                    Returns all User objects in the repository.
                    Not very practical, but good for now.
                    Will be improved later.
            </documentation>
            <input name="listUsersInput" message="tns:listUsersRequest"/>
            <output name="listUsersOutput" message="tns:listUsersResponse"/>
        </operation>

        <operation name="modifyUser">
            <documentation>
                    Modifies User object using relative change description.
                    Must fail if user with provided OID does not exists.
                    Must fail if any of the described changes cannot be
                    applied. Should be atomic.

                If two or more modify operations are executed in parallel, the
                operations should be merged. In case that the operations are in
                conflict (e.g. one operation adding a value and the other
                removing the same value), the result is not deterministic.

                The operation may fail if the modified object does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                TODO: optimistic locking
            </documentation>
            <input name="modifyUserInput" message="tns:modifyUserRequest"/>
            <output name="modifyUserOutput" message="tns:modifyUserResponse"/>
        </operation>

        <operation name="deleteUser">
            <documentation>
                    Deleted user with provided OID.
                    Must fail if user with specified OID does not exists.
                    Must fail if object with specified OID does not have
                    correct type.
                    Should be atomic.
            </documentation>
            <input name="deleteUserInput" message="tns:deleteUserRequest"/>
            <output name="deleteUserOutput" message="tns:deleteUserResponse"/>
        </operation>

    </portType>

    <plnk:partnerLinkType name="idmModel">
        <!-- A partner link type is automatically generated when a new port type is added. Partner link types are used by BPEL processes.
In a BPEL process, a partner link represents the interaction between the BPEL process and a partner service. Each partner link is associated with a partner link type.
A partner link type characterizes the conversational relationship between two services. The partner link type can have one or two roles.-->
        <plnk:role name="idmModelPortTypeRole" portType="tns:idmModelPortType"/>
    </plnk:partnerLinkType>

</definitions>

