<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>OpenIDM-xml</artifactId>
        <groupId>com.forgerock.openidm.xml</groupId>
        <version>1.7-SNAPSHOT</version>
    </parent>
    <groupId>com.forgerock.openidm.xml</groupId>
    <artifactId>OpenIDM-schemas</artifactId>
    <version>1.7-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>OpenIDM Schema Collection</name>
    <description>OpenIDM is an open standards based Identity Management, Provisioning and Compliance solution. Experience shows that the most important features of an identity management product are: high flexibility in Business Process handling and compliance with open standards and interfaces. A highly flexible user interface combined with a very robust workflow engine make OpenIDM ready for any Identity Management project.</description>
    <url>http://www.forgerock.com/openidm.html</url>
    <organization>
        <name>ForgeRock</name>
        <url>http://www.forgerock.com</url>
    </organization>
    <dependencies>
        <dependency>
            <groupId>com.forgerock.openidm</groupId>
            <artifactId>OpenIDM-api</artifactId>
            <version>${openidm.currentVersion}</version>
            <scope>provided</scope>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
        </dependency>
        <!--<dependency>
            <groupId>com.forgerock.openidm</groupId>
            <artifactId>OpenIDM-commons</artifactId>
            <version>${openidm.currentVersion}</version>
            <scope>provided</scope>
            <type>jar</type>
        </dependency>-->
       
        <dependency>
            <groupId>com.sun.xsom</groupId>
            <artifactId>xsom</artifactId>
            <version>20100725</version>
        </dependency>
        <!--Provided dependencies-->
        <dependency>
            <groupId>xml-resolver</groupId>
            <artifactId>xml-resolver</artifactId>
            <version>1.2</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxws-maven-plugin</artifactId>
                <version>1.12
                </version>
                <executions>
                    <execution>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                        <configuration>
                            <wsdlUrls>
                                <wsdlUrl>http://localhost:8080/repositoryService/RepositoryService?wsdl</wsdlUrl>
                            </wsdlUrls>
                            <staleFile>${project.build.directory}/jaxws/stale/RepositoryService.stale</staleFile>
                        </configuration>
                        <id>wsimport-generate-RepositoryService</id>
                        <phase>generate-sources</phase>
                    </execution>
                    <execution>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                        <configuration>
                            <wsdlUrls>
                                <wsdlUrl>http://localhost:8080/modelService/ModelService?wsdl</wsdlUrl>
                                <wsdlUrl>http://localhost:8080/modelService/PasswordService?wsdl</wsdlUrl>
								<wsdlUrl>http://localhost:8080/cycleManagementService/CycleManagementService?wsdl</wsdlUrl>
                            </wsdlUrls>
                            <staleFile>${project.build.directory}/jaxws/stale/ModelService.stale</staleFile>
                        </configuration>
                        <id>wsimport-generate-ModelService</id>
                        <phase>generate-sources</phase>
                    </execution>
                    <execution>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                        <configuration>
                            <wsdlUrls>
                                <wsdlUrl>http://localhost:8080/stagingService/StagingService?wsdl</wsdlUrl>
                            </wsdlUrls>
                            <staleFile>${project.build.directory}/jaxws/stale/StagingService.stale</staleFile>
                        </configuration>
                        <id>wsimport-generate-StagingService</id>
                        <phase>generate-sources</phase>
                    </execution>
                    <execution>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                        <configuration>
                            <wsdlUrls>
                                <wsdlUrl>http://localhost:8080/provisioningService/ProvisioningService?wsdl</wsdlUrl>
                                <wsdlUrl>http://localhost:8080/resourceObjectChangeListenerService/resourceObjectChangeListenerPort?wsdl</wsdlUrl>
                            </wsdlUrls>
                            <staleFile>${project.build.directory}/jaxws/stale/ProvisioningService.stale</staleFile>
                        </configuration>
                        <id>wsimport-generate-ProvisioningService</id>
                        <phase>generate-sources</phase>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.sun.xml.bind</groupId>
                        <artifactId>jaxb-impl</artifactId>
                        <version>2.2.3</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <wsdlDirectory>${basedir}/src/main/resources/META-INF/wsdl</wsdlDirectory>
                    <sourceDestDir>${project.build.directory}/generated-sources/jaxws-wsimport</sourceDestDir>
                    <xnocompile>true</xnocompile>
                    <verbose>true</verbose>
                    <extension>true</extension>
                    <catalog>${basedir}/src/main/resources/META-INF/jax-ws-catalog.xml</catalog>
                </configuration>
            </plugin>
         <!-- Below plugin provides a separate JAR for the JAX-WS artifacts (i.e.,  
            the Java classes created by running wsdl2java or wsimport), as this JAR
            will also be used by the SOAP client.
         -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>src/assembly/repositoryws-jar.xml</descriptor>
                        <descriptor>src/assembly/modelws-jar.xml</descriptor>
                        <descriptor>src/assembly/passwordws-jar.xml</descriptor>
                        <descriptor>src/assembly/stagingws-jar.xml</descriptor>
                        <descriptor>src/assembly/provisioningws-jar.xml</descriptor>
						<descriptor>src/assembly/cyclemanagementws-jar.xml</descriptor>
                    </descriptors>
                    <appendAssemblyId>true</appendAssemblyId>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
