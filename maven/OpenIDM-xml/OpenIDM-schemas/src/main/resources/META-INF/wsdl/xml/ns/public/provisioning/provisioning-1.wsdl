<?xml version="1.0" encoding="UTF-8"?>

<!--

Copyright (c) 2010 ForgeRock Inc. All Rights Reserved

The contents of this file are subject to the terms
of the Common Development and Distribution License
(the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at
http://www.opensource.org/licenses/cddl1.php or
OpenIDM/legal/CDDLv1.0.txt
See the License for the specific language governing
permission and limitations under the License.

When distributing Covered Code, include this CDDL
Header Notice in each file and include the License file
at OpenIDM/legal/CDDLv1.0.txt.
If applicable, add the following below the CDDL Header,
with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted 2010 [name of copyright owner]"

-->

<definitions name="provisioning"
    targetNamespace="http://openidm.forgerock.com/xml/ns/public/provisioning/provisioning-1.wsdl"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:tns="http://openidm.forgerock.com/xml/ns/public/provisioning/provisioning-1.wsdl"
    xmlns:c="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd"
    xmlns:cw="http://openidm.forgerock.com/xml/ns/public/provisioning/provisioning-1.wsdl"
    xmlns:i="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">

    <!-- Prefix "i" defined above is all wrong! It is workaround for OPENIDM-124 -->

    <documentation>
        Provisioning Service Interface.

        This service retrieves information about resorce objects and resources
        and handles changes to resource objects. Implementations of this
        interface will apply the changes to accounts, groups and other similar
        objects to the target resources.

        This interface is an extension of generic Object Access Interface. However due
        to the WSDL limitations some parts of the definition (e.g. operations)
        are copied&amp;pasted (and extended) instead of re-used.

        Supported object types:
          Resource
          ResourceObjectShadow and all sub-types

        Supported extra data types:
          Resource Objects (Resource Schema)

        It is using an identity XML schema for OpenIDM and OpenIDM common
        schema.

        It is very simple for now. No resource capabilities, etc.

        DRAFT: Very likely to change. Not tested, not even compiled. Just
               passing the validation. Expect a lot of implementation problems.

        TODO: Explain shadows

        TODO: Rationale about provisioing faults
    </documentation>

    <types>
        <xsd:schema targetNamespace="http://openidm.forgerock.com/xml/ns/public/provisioning/provisioning-1.wsdl">

            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd" schemaLocation="../common/common-1.xsd"/>

            <!-- This should import identity schema. But it deos not now. Workaround for OPENIDM-124 -->
            <!--
            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/identity/1#" schemaLocation="../repository/identity.xsd"/>
            -->

        </xsd:schema>
    </types>

    <!-- Common messages
         Following messages should be in a separate WSDL file and imported here.
         But that does not work on OpenESB. Therefore good old copy&paste
         instead of import -->

    <message name="addObjectRequest">
        <part name="objectContainer" type="c:ObjectContainerType">
            <documentation>
                Container with the Object to be created.
                OID attribute of the object may be empty.
            </documentation>
        </part>
        <part name="scripts" type="i:ScriptsType">
            <documentation>
                Set of scripts that should be executed with the operation.
                The "operation" element should be ignored in this case.
                The script agruments must not contain expressions, only the
                fixed values must be there.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="addObjectResponse">
        <part name="oid" type="xsd:string">
            <documentation>
                OID assigned to the created object.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="getObjectRequest">
        <part name="oid" type="xsd:string"/>
        <part name="resolve" type="c:PropertyReferenceListType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="getObjectResponse">
        <part name="objectContainer" type="c:ObjectContainerType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="listObjectsRequest">
        <part name="objectType" type="xsd:anyURI">
            <documentation>
                Object type to list.
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="listObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="searchObjectsRequest">
        <part name="query" type="c:QueryType">
            <documentation>
                Search criteria
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="searchObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="modifyObjectRequest">
        <part name="objectChange" type="c:ObjectModificationType"/>
        <part name="scripts" type="i:ScriptsType">
            <documentation>
                Set of scripts that should be executed with the operation.
                The "operation" element should be ignored in this case.
                The script agruments must not contain expressions, only the
                fixed values must be there.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="modifyObjectResponse">
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="synchronizeRequest">
        <part name="oid" type="xsd:string"/>
    </message>
    <message name="synchronizeResponse">
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="deleteObjectRequest">
        <part name="oid" type="xsd:string"/>
        <part name="scripts" type="i:ScriptsType">
            <documentation>
                Set of scripts that should be executed with the operation.
                The "operation" element should be ignored in this case.
                The script agruments must not contain expressions, only the
                fixed values must be there.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="deleteObjectResponse">
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="getPropertyAvailableValuesRequest">
        <part name="oid" type="xsd:string"/>
        <part name="properties" type="c:PropertyReferenceListType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="getPropertyAvailableValuesResponse">
        <part name="propertyAvailableValuesList" type="c:PropertyAvailableValuesListType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="FaultMessage">
        <part name="fault" element="c:fault"/>
    </message>

    <message name="operationalResultMessage">
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <!-- End of common messages -->

    <message name="addResourceObjectRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="objectContainer" type="c:ObjectContainerType">
            <documentation>
                Container with the Resource Object to be created.
                The must contain detached object (OID must NOT be present).
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="addResourceObjectResponse">
        <part name="createdObjectContainer" type="c:ObjectContainerType">
            <documentation>
                Created object. May have additional attributes/properties such
                as generated identifiers, operation attributes, etc.
                The must contain detached object (OID must NOT be present).
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="getResourceObjectRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="identification" type="i:ResourceObjectIdentificationType">
            <documentation>
                Set of attributes/properties that identify object on the resource.
                Usually it will be just one attribute, but there can be more.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="getResourceObjectResponse">
        <part name="objectContainer" type="c:ObjectContainerType">
            <documentation>
                Container with the Resource Object.
                The must contain detached object (OID must NOT be present).
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="listResourceObjectsRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="objectType" type="xsd:anyURI">
            <documentation>
                Object type to list. Should be valid object class from the
                resource schema encoded in the URL form.
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="listResourceObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>


    <message name="modifyResourceObjectRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="objectChange" type="c:ObjectModificationType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="modifyResourceObjectResponse">
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="deleteResourceObjectRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="identification" type="i:ResourceObjectIdentificationType">
            <documentation>
                Set of attributes/properties that identify object on the resource.
                Usually it will be just one attribute, but there can be more.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="deleteResourceObjectResponse">
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="testResourceRequest">
        <part name="resourceOid" type="xsd:string"/>
    </message>
    <message name="testResourceResponse">
        <part name="result" type="c:ResourceTestResultType"/>
    </message>

    <message name="launchImportFromResourceRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="objectClass" type="xsd:string">
            <documentation>
                Object class to import.
                Local name, assumed to be in the resource namespace.
            </documentation>
        </part>
    </message>
    <message name="launchImportFromResourceResponse">
        <part name="empty" type="c:EmptyType"/>
    </message>

    <message name="getImportStatusRequest">
        <part name="resourceOid" type="xsd:string"/>
    </message>
    <message name="getImportStatusResponse">
        <part name="status" type="c:TaskStatusType"/>
    </message>

    <portType name="provisioningPortType">
        <operation name="synchronize">
            <documentation>
            Collect external changes on a resource and call the business logic
            with the cumulated change data.

            This method will be invoked by any type of scheduler.

            TODO; The exact signature is under future discussion.
            </documentation>
            <input name="synchronizeInput" message="tns:synchronizeRequest"/>
            <output name="synchronizeOutput" message="tns:synchronizeResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>


        <operation name="addObject">
            <documentation>
                Add new object.

                The OID provided in the input message may be empty. In that case
                the OID will be assigned by the implementation of this method
                and it will be provided as return value.

                This operation should fail if such object already exists (if
                object with the provided OID already exists).

                The operation may fail if provided OID is in an unusable format
                for the storage. Generating own OIDs and providing them to this
                method is not recommended for normal operation.

                Should be atomic. Should not allow creation of two objects with
                the same OID (even if created in parallel).

                The operation may fail if the object to be created does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                Faults:
                  any SystemFaultType
                  ObjectAlreadyExistsFaultType
                  IllegalArgumentFaultType: wrong OID format
                  SchemaViolationFaultType: provided object violates datastore schema
                  ProvisioningFaultType: ???

                Resource Object Shadows:
                Adding new resource object shadow should result in
                appropriate resource object being created on the resource and
                corresponding shadow object being created in local
                repository. Provided resource object must comply with resource
                schema, the operation may fail if it does not.

                Resource:
                Adding a Resource is not trivial. TODO: all the details.

            </documentation>
            <input name="addObjectInput" message="tns:addObjectRequest"/>
            <output name="addObjectOutput" message="tns:addObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getObject">
            <documentation>
                    Returns object for provided OID.
                    Must fail if object with the OID does not exists.

                    Reference resolution is SUPPORTED by this interface.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      ProvisioningFaultType: ???

                    Resource Object Shadows:
                    The resorce object shadow atributes may be retrieved from
                    the local database, directly form the resource or a
                    combination of both. The retrieval may fail due to resource
                    failure, network failure or similar external cases. The
                    retrieval may also take relatively long time (e.g. until it
                    times out).
            </documentation>
            <input name="getObjectInput" message="tns:getObjectRequest"/>
            <output name="getObjectOutput" message="tns:getObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listObjects">
            <documentation>
                    Returns all objects of specified type that are available
                    to the implementation.

                    Returns empty list if object type is correct but there are
                    no objects of that type.

                    Should fail if object type is wrong.
                    
                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      ProvisioningFaultType: ???
            </documentation>
            <input name="listObjectsInput" message="tns:listObjectsRequest"/>
            <output name="listObjectsOutput" message="tns:listObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="searchObjects">
            <documentation>
                    Search for objects. Searches through all
                    object types. Returns a list of objects that match search
                    criteria.

                    Returns empty list if object type is correct but there are
                    no objects of that type.

                    Should fail if object type is wrong. Should fail if unknown property
                    is specified in the query.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      SchemaViolationFaultType: unknown property used in search query
                      ProvisioningFaultType: ???
            </documentation>
            <input name="searchObjectsInput" message="tns:searchObjectsRequest"/>
            <output name="searchObjectsOutput" message="tns:searchObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="modifyObject">
            <documentation>
                Modifies object using relative change description.
                Must fail if user with provided OID does not exists.
                Must fail if any of the described changes cannot be applied.
                Should be atomic.

                If two or more modify operations are executed in parallel, the
                operations should be merged. In case that the operations are in
                conflict (e.g. one operation adding a value and the other
                removing the same value), the result is not deterministic.

                The operation may fail if the modified object does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                TODO: optimistic locking

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
                      InapplicableOperationFaultType: decribed change is not applicable
                      SchemaViolationFaultType: resulting object would violate datastore schema
                      ProvisioningFaultType: ???
            </documentation>
            <input name="modifyObjectInput" message="tns:modifyObjectRequest"/>
            <output name="modifyObjectOutput" message="tns:modifyObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="deleteObject">
            <documentation>
                    Deleted object with provided OID.
                    Must fail if object with specified OID does not exists.
                    Should be atomic.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
                      ReferentialIntegrityFaultType
                      ProvisioningFaultType: ???

                Resource Object Shadow:
                Delete specified resource objects. Also deletes all attribute
                values, but does not necesarily deletes objects that this
                object refers to. E.g. deleting an account will cause the delete
                of group that it belongs to.
            </documentation>
            <input name="deleteObjectInput" message="tns:deleteObjectRequest"/>
            <output name="deleteObjectOutput" message="tns:deleteObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getPropertyAvailableValues">
            <documentation>
                Returns list of available values for specified properties.

                The returned values can be used as valid values for properties
                of the specific object. The provided values can be used e.g.
                for listing them in GUI list boxes, for early validation
                (pre-validation), displaying help messages, auto-complete, etc.

                In case the list of available values is too big or it is not
                available, the empty list should be returned, setting the
                "closed" flag to false.

                This optional operation is SUPPORTED by this interface.

                Faults:
                      any SystemFaultType
                      UnsupportedObjectTypeFaultType: specified object type is not supported by the interface
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="getPropertyAvailableValuesInput" message="tns:getPropertyAvailableValuesRequest"/>
            <output name="getPropertyAvailableValuesOutput" message="tns:getPropertyAvailableValuesResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <!-- RESOURCE OBJECT operations
             Following operations do not work with Shadows, they do not even
             work with "Objects" in the identity sense. They work with real
             things on the target resources that are NOT identified by OID. -->

        <operation name="addResourceObject">
            <documentation>
                Adding new resource object. Appropriate resource object should
                be created on the resource as a result of this operation. This
                method does NOT create or update any shadow objects or any
                other business objects in the local repository. It goes directly
                to the resource.

                Provided resource object must comply with resource
                schema, the operation may fail if it does not.

                The object has to comply with the resource schema (NOT the
                Identity Schema of OpenIDM system), therefore only very generic
                XML schema of object is used in this operation. The identification
                of the resource object is also not specified here. It is specified
                in annotations in the resource schema.

                This method is not required to implement any form of caching,
                queueing, reference resolution or any other "smart" algorithm.

                Use of this method is not recommended if there is a way how to
                do the same using the standard "object access" methods. E.g.
                if accounts can be namipulated using account shadows, the
                shadows should be used. This method is provided only to support
                the rare case that an unknown resource object type should be
                used in business logic.

                Should be atomic. Should not allow creation of two objects with
                the same identifier (even if created in parallel).

                Faults:
                  any SystemFaultType
                  ObjectAlreadyExistsFaultType
                  IllegalArgumentFaultType: wrong identifier format or missing identifier
                  SchemaViolationFaultType: provided object violated datastore schema
                  ProvisioningFaultType: ???
            </documentation>
            <input name="addResourceObjectInput" message="tns:addResourceObjectRequest"/>
            <output name="addResourceObjectOutput" message="tns:addResourceObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getResourceObject">
            <documentation>
                Returns resource object.

                This method does NOT use any shadow objects for reference or any
                other business objects in the local repository. It goes directly
                to the resource.

                The returned object (indirectly) complies with the resource
                schema, but it is returned re-formated in a form of detached
                shadow object. Although the form is the same as shadow object,
                this is NOT really a shadow object because it is not stored in
                the repository (it is detached). It does NOT have oid.

                The object is identified by whatever identification
                properties/attributes are defined by the resource schema.
                Therefore only a very generic XSD definition of identifier is
                required by this method.

                This method is not required to implement any form of caching,
                queueing, reference resolution or any other "smart" algorithm.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong identifier format or missing identifier
                      ObjectNotFoundFaultType: object with specified identifier does not exists
                      ProvisioningFaultType: ???


                Use of this method is not recommended if there is a way how to
                do the same using the standard "object access" methods. E.g.
                if accounts can be namipulated using account shadows, the
                shadows should be used. This method is provided only to support
                the rare case that an unknown resource object type should be
                used in business logic.
            </documentation>
            <input name="getResourceObjectInput" message="tns:getResourceObjectRequest"/>
            <output name="getResourceObjectOutput" message="tns:getResourceObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listResourceObjects">
            <documentation>
                Returns all objects of specified type that are available to the
                implementation.

                Returns empty list if object type is correct but there are no
                objects of that type.

                Should fail if object type is wrong (e.g. specified type is
                not part of resource schema).

                This method does NOT use any shadow objects for reference or any
                other business objects in the local repository. It goes directly
                to the resource.

                The returned objects (indirectly) complies with the resource
                schema, but it is returned re-formated in a form of detached
                shadow object. Although the form is the same as shadow object,
                this is NOT really a shadow object because it is not stored in
                the repository (it is detached). It does NOT have oid.

                The object is identified by whatever identification
                properties/attributes are defined by the resource schema.

                This method is not required to implement any form of caching,
                queueing, reference resolution or any other "smart" algorithm.

                any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      ProvisioningFaultType: ???


                Use of this method is not recommended if there is a way how to
                do the same using the standard "object access" methods. E.g.
                if accounts can be namipulated using account shadows, the
                shadows should be used. This method is provided only to support
                the rare case that an unknown resource object type should be
                used in business logic and for diagnostics reasons.
            </documentation>
            <input name="listResourceObjectsInput" message="tns:listResourceObjectsRequest"/>
            <output name="listResourceObjectsOutput" message="tns:listResourceObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="modifyResourceObject">
            <documentation>
                Modifies resource object using relative change description.

                This method does NOT use any shadow objects for reference or any
                other business objects in the local repository. It goes directly
                to the resource.

                The returned object (indirectly) complies with the resource
                schema, but it is returned re-formated in a form of detached
                shadow object. Although the form is the same as shadow object,
                this is NOT really a shadow object because it is not stored in
                the repository (it is detached). It does NOT have oid.

                The object is identified by whatever identification
                properties/attributes are defined by the resource schema.
                Therefore only a very generic XSD definition of identifier is
                required by this method.

                This method is not required to implement any form of caching,
                queueing, reference resolution or any other "smart" algorithm.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified identifier does not exists
                      IllegalArgumentFaultType: wrong identifier format or missing identifier
                      InapplicableOperationFaultType: decribed change is not applicable
                      SchemaViolationFaultType: resulting object would violate datastore schema
                      ProvisioningFaultType: ???

                Use of this method is not recommended if there is a way how to
                do the same using the standard "object access" methods. E.g.
                if accounts can be namipulated using account shadows, the
                shadows should be used. This method is provided only to support
                the rare case that an unknown resource object type should be
                used in business logic.
            </documentation>
            <input name="modifyResourceObjectInput" message="tns:modifyResourceObjectRequest"/>
            <output name="modifyResourceObjectOutput" message="tns:modifyResourceObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="deleteResourceObject">
            <documentation>
                Delete specified resource objects.

                This method does NOT use any shadow objects for reference or any
                other business objects in the local repository. It goes directly
                to the resource.

                The object is identified by whatever identification
                properties/attributes are defined by the resource schema.
                Therefore only a very generic XSD definition of identifier is
                required by this method.

                This method is not required to implement any form of caching,
                queueing, reference resolution or any other "smart" algorithm.

                This operation should fail if the object does not exists.
                Should be atomic.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified identifier does not exists
                      IllegalArgumentFaultType: wrong identifier format or missing identifier
                      ProvisioningFaultType: ???

                Use of this method is not recommended if there is a way how to
                do the same using the standard "object access" methods. E.g.
                if accounts can be namipulated using account shadows, the
                shadows should be used. This method is provided only to support
                the rare case that an unknown resource object type should be
                used in business logic.
            </documentation>
            <input name="deleteResourceObjectInput" message="tns:deleteResourceObjectRequest"/>
            <output name="deleteResourceObjectOutput" message="tns:deleteResourceObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="testResource">
            <documentation>
                Test the resouce connection and basic resource connector
                functionality.

                This operation will NOT raise fault in case the resource
                connection fails. It such case it will indicate the failure in
                the return message, but the operation itself succeeds.
                The operations fails only if the provided arguments are wrong,
                in case of system error, system misconfiguration, etc.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="testResourceInput" message="tns:testResourceRequest"/>
            <output name="testResourceOutput" message="tns:testResourceResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="launchImportFromResource">
            <documentation>
                Launch import task that will import all the accounts from the
                resource.

                WARNING: This operation is not considered public. It is a
                temporary solution until we have full-featured task management.
                It may be removed any time without a warning.

                DO NOT USE IT unless you are really sure you know what you
                are doing.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="launchImportFromResourceInput" message="tns:launchImportFromResourceRequest"/>
            <output name="launchImportFromResourceOutput" message="tns:launchImportFromResourceResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getImportStatus">
            <documentation>
                Get the status report of the running or recently finished import
                task.

                WARNING: This operation is not considered public. It is a
                temporary solution until we have full-featured task management.
                It may be removed any time without a warning.

                DO NOT USE IT unless you are really sure you know what you
                are doing.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="getImportStatusInput" message="tns:getImportStatusRequest"/>
            <output name="getImportStatusOutput" message="tns:getImportStatusResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

    </portType>
    <binding name="provisioningBinding" type="tns:provisioningPortType">
        <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="synchronize">
            <soap:operation/>
            <input name="synchronizeInput">
                <soap:body use="literal"/>
            </input>
            <output name="synchronizeOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="addObject">
            <soap:operation/>
            <input name="addObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="addObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getObject">
            <soap:operation/>
            <input name="getObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="getObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listObjects">
            <soap:operation/>
            <input name="listObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="listObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="searchObjects">
            <soap:operation/>
            <input name="searchObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="searchObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="modifyObject">
            <soap:operation/>
            <input name="modifyObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="modifyObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteObject">
            <soap:operation/>
            <input name="deleteObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="deleteObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getPropertyAvailableValues">
            <soap:operation/>
            <input name="getPropertyAvailableValuesInput">
                <soap:body use="literal"/>
            </input>
            <output name="getPropertyAvailableValuesOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="addResourceObject">
            <soap:operation/>
            <input name="addResourceObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="addResourceObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getResourceObject">
            <soap:operation/>
            <input name="getResourceObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="getResourceObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listResourceObjects">
            <soap:operation/>
            <input name="listResourceObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="listResourceObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="modifyResourceObject">
            <soap:operation/>
            <input name="modifyResourceObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="modifyResourceObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteResourceObject">
            <soap:operation/>
            <input name="deleteResourceObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="deleteResourceObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="testResource">
            <soap:operation/>
            <input name="testResourceInput">
                <soap:body use="literal"/>
            </input>
            <output name="testResourceOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="launchImportFromResource">
            <soap:operation/>
            <input name="launchImportFromResourceInput">
                <soap:body use="literal"/>
            </input>
            <output name="launchImportFromResourceOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getImportStatus">
            <soap:operation/>
            <input name="getImportStatusInput">
                <soap:body use="literal"/>
            </input>
            <output name="getImportStatusOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>        
    </binding>
</definitions>


