<?xml version="1.0" encoding="UTF-8"?>

<!--

Copyright (c) 2010 ForgeRock Inc. All Rights Reserved

The contents of this file are subject to the terms
of the Common Development and Distribution License
(the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at
http://www.opensource.org/licenses/cddl1.php or
OpenIDM/legal/CDDLv1.0.txt
See the License for the specific language governing
permission and limitations under the License.

When distributing Covered Code, include this CDDL
Header Notice in each file and include the License file
at OpenIDM/legal/CDDLv1.0.txt.
If applicable, add the following below the CDDL Header,
with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted 2010 [name of copyright owner]"

-->

<definitions name="repository"
    targetNamespace="http://openidm.forgerock.com/xml/ns/public/repository/repository-1.wsdl"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:tns="http://openidm.forgerock.com/xml/ns/public/repository/repository-1.wsdl"
    xmlns:c="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd"
    xmlns:cw="http://openidm.forgerock.com/xml/ns/public/common/object-1.wsdl"
    xmlns:idm="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">    
    <!-- Prefix "idm" defined above is all wrong! It is workaround for OPENIDM-124 -->

    <documentation>
        Identity Repository Service Interface.

        This service provides repository for objects that are commonly found
        in identity management deployments. It is used for storage and retrieval
        of objects. It also supports modifications (relative changes) and
        searching.

        This interface is an extension of generic Object Interface. However due
        to the WSDL limitations some parts of the definition (e.g. operations)
        are copied&amp;pasted instead of re-used.

        Supported object types:
          All object types from Common Schema
          All object types from Identity Schema

        Identity repository may add some kind of basic logic in addition to a
        pure storage of data. E.g. it may check referential consistency,
        validate schema, etc.

        It is using an identity XML schema for OpenIDM and OpenIDM common
        schema. It is extending generic Object Interface.

        The implementation may store the objects and properties in any suitable
        way and it is not required to check any schema beyond this standard
        schema. However, the implementation MAY be able to check additional
        schema definitions, e.g. to check for mandatory and allowed properties
        and property types. This may
        be either explicit (e.g. implementation chceking against provided XML
        schema) or implicit, conforming to the constraints of underlying storage
        (e.g. LDAP schema enforced by underlying directory server). One way or
        another, the implementation may fail to store the objects that violate
        the schema. The method how the schemas are "loaded" to the
        implementation are not defined by this interface. And this intrface
        even cannot "reveal" the schema to ist users (at least not now).
        Therefore clients of this interface must be prepared to handle schema
        violation faults.

        The implementation is not required to index the data or provide ony
        other optimizations. This depends on the specific implementation, its
        configuration and the underlying storage system. Qualitative constraints
        (such as performance) are NOT defined by this interface definition.

        Naming conventions:
        operations should be named as &lt;operation&gt;&lt;objectType&gt; e.g. addUser,
        modifyAccount, searchObjects. The operations that return single object
        instance of work on single object should be named in singular
        (e.g. addUser). The operation that return multiple instances should be
        named in plural (e.g. listObjects). Operations names should be unified
        as well:
        * add, modify, delete - writing to repository, single object, need OID
        * get - retrieving single object by OID
        * list - returning all objects, no or fixed search criteria
        * search - returning subset of objects with flexible search criteria

        TODO: Atomicity, consistency

        TODO: security constraints

        TODO: Faults

        TODO: inherently thread-safe

        TODO: note about distributed storage systems and weak/eventual consistency

        TODO: seach operation
        * only required to work with strings (xsd:string)
        * support for additional data types may be provided


        For now it can only work with User obejects and it has no search.

        DRAFT: Very likely to change. Not tested, not even compiled. Just
               passing the validation. Expect a lot of implementation problems.

        Supported object types: Objec, User, Resource Object Shadow

        Notes:
        The definition of this interface is somehow "fuzzy" at places. E.g.
        allowing schema-aware implementation but not mandating it, recommending
        to remove duplicates, but tolerating them, etc. The reason for this is
        to have better fit to the underlying storage mechanisms and therefore
        more efficient and simpler implementation. It may complicate the clients
        if the code needs to be generic and fit each and every implementation of
        this interface. However, such code will be quite rare. Most of the code
        will be developed to work on a specific storage (e.g. Oracle DB or LDAP)
        and therefore can be made slightly implementation-specific. Changing the
        storage in a running IDM system is extremely unlikely.
    </documentation>
    <types>
        <xsd:schema targetNamespace="http://openidm.forgerock.com/xml/ns/public/repository/repository-1.wsdl">
            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd" schemaLocation="../common/common-1.xsd"/>
            <!-- This should import identity schema. But it deos not now. Workaround for OPENIDM-124 -->
            <!--
            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/identity/1#" schemaLocation="identity.xsd"/>
            -->
        </xsd:schema>
    </types>

    <!-- OBJECT messages -->

    <!-- Common messages
         Following messages should be in a separate WSDL file and imported here.
         But that does not work on OpenESB. Therefore good old copy&paste
         instead of import -->

    <message name="addObjectRequest">
        <part name="objectContainer" type="c:ObjectContainerType">
            <documentation>
                Container with the Objectto be created.
                OID attribute of the object may be empty.
            </documentation>
        </part>
    </message>
    <message name="addObjectResponse">
        <part name="oid" type="xsd:string">
            <documentation>
                OID assigned to the created object.
            </documentation>
        </part>
    </message>

    <message name="getObjectRequest">
        <part name="oid" type="xsd:string"/>
        <part name="resolve" type="c:PropertyReferenceListType"/>
    </message>
    <message name="getObjectResponse">
        <part name="objectContainer" type="c:ObjectContainerType"/>
    </message>

    <message name="listObjectsRequest">
        <part name="objectType" type="xsd:anyURI">
            <documentation>
                Object type to list.
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
    </message>

    <message name="listObjectsResponse">
        <part name="objectList" type="c:ObjectListType">
        </part>
    </message>

    <message name="searchObjectsRequest">
        <part name="query" type="c:QueryType">
            <documentation>
                Search criteria
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
    </message>
    <message name="searchObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
    </message>

    <message name="modifyObjectRequest">
        <part name="objectChange" type="c:ObjectModificationType"/>
    </message>
    <message name="modifyObjectResponse">
    </message>

    <message name="deleteObjectRequest">
        <part name="oid" type="xsd:string"/>
    </message>
    <message name="deleteObjectResponse">
    </message>

    <message name="getPropertyAvailableValuesRequest">
        <part name="oid" type="xsd:string"/>
        <part name="properties" type="c:PropertyReferenceListType"/>
    </message>
    <message name="getPropertyAvailableValuesResponse">
        <part name="propertyAvailableValuesList" type="c:PropertyAvailableValuesListType"/>
    </message>

    <message name="FaultMessage">
        <part name="fault" element="c:fault"/>
    </message>

    <message name="operationalResultMessage">
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <!-- End of common messages -->

    <message name="listAccountShadowOwnerRequest">
        <part name="accountOid" type="xsd:string"/>
    </message>
    <message name="listAccountShadowOwnerResponse">
        <part name="userContainer" type="idm:UserContainerType"/>
    </message>

    <message name="listResourceObjectShadowsRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="resourceObjectShadowType" type="xsd:anyURI"/>
    </message>
    <message name="listResourceObjectShadowsResponse">
        <part name="resourceObjectShadowList" type="idm:ResourceObjectShadowListType"/>
    </message>

    <portType name="repositoryPortType">

        <!-- OBJECT operations -->

        <operation name="addObject">
            <documentation>
                Add new object.

                The OID provided in the input message may be empty. In that case
                the OID will be assigned by the implementation of this method
                and it will be provided as return value.

                This operation should fail if such object already exists (if
                object with the provided OID already exists).

                The operation may fail if provided OID is in an unusable format
                for the storage. Generating own OIDs and providing them to this
                method is not recommended for normal operation.

                Should be atomic. Should not allow creation of two objects with
                the same OID (even if created in parallel).

                The operation may fail if the object to be created does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                Faults:
                  any SystemFaultType
                  ObjectAlreadyExistsFaultType
                  IllegalArgumentFaultType: wrong OID format
                  SchemaViolationFaultType: provided object violates datastore schema
            </documentation>
            <input name="addObjectInput" message="tns:addObjectRequest"/>
            <output name="addObjectOutput" message="tns:addObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getObject">
            <documentation>
                    Returns object for provided OID.
                    Must fail if object with the OID does not exists.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="getObjectInput" message="tns:getObjectRequest"/>
            <output name="getObjectOutput" message="tns:getObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listObjects">
            <documentation>
                    Returns all objects of specified type in the repository.

                    Returns empty list if object type is correct but there are
                    no objects of that type.

                    Should fail if object type is wrong.

                    Not very practical, but good for now.
                    Will be improved later.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
            </documentation>
            <input name="listObjectsInput" message="tns:listObjectsRequest"/>
            <output name="listObjectsOutput" message="tns:listObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="searchObjects">
            <documentation>
                    Search for objects in the repository. Searches through all
                    object types. Returns a list of objects that match search
                    criteria.

                    Returns empty list if object type is correct but there are
                    no objects of that type.

                    Should fail if object type is wrong. Should fail if unknown property
                    is specified in the query.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      SchemaViolationFaultType: unknown property used in search query
            </documentation>
            <input name="searchObjectsInput" message="tns:searchObjectsRequest"/>
            <output name="searchObjectsOutput" message="tns:searchObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>

        </operation>

        <operation name="modifyObject">
            <documentation>
                Modifies object using relative change description.
                Must fail if user with provided OID does not exists.
                Must fail if any of the described changes cannot be applied.
                Should be atomic.

                If two or more modify operations are executed in parallel, the
                operations should be merged. In case that the operations are in
                conflict (e.g. one operation adding a value and the other
                removing the same value), the result is not deterministic.

                The operation may fail if the modified object does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                TODO: optimistic locking

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
                      InapplicableOperationFaultType: decribed change is not applicable
                      SchemaViolationFaultType: resulting object would violate datastore schema
            </documentation>
            <input name="modifyObjectInput" message="tns:modifyObjectRequest"/>
            <output name="modifyObjectOutput" message="tns:modifyObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="deleteObject">
            <documentation>
                    Deleted object with provided OID.
                    Must fail if object with specified OID does not exists.
                    Should be atomic.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="deleteObjectInput" message="tns:deleteObjectRequest"/>
            <output name="deleteObjectOutput" message="tns:deleteObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getPropertyAvailableValues">
            <documentation>
                Returns list of available values for specified properties.

                TODO: This needs to be figured out ... how to work with lookup
                lists, enumerations, etc.

                DO NOT IMPLEMENT YET

                The returned values can be used as valid values for properties
                of the specific object. The provided values can be used e.g.
                for listing them in GUI list boxes, for early validation
                (pre-validation), displaying help messages, auto-complete, etc.

                In case the list of available values is too big or it is not
                available, the empty list should be returned, setting the
                "closed" flag to false.

                This is optional operation. It may not be supported by a specific
                sub-interface of this interface. Please refer to the specification
                of the sub-interface. If a sub-interface supports this operation,
                it has to be supported for all object types and all properties
                supported by such sub-interface.

                Faults:
                      any SystemFaultType
                      UnsupportedOperationFaultType: this optional operation is not supported
                      UnsupportedObjectTypeFaultType: specified object type is not supported by the interface
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="getPropertyAvailableValuesInput" message="tns:getPropertyAvailableValuesRequest"/>
            <output name="getPropertyAvailableValuesOutput" message="tns:getPropertyAvailableValuesResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>


        <!-- Type-specific operations -->

        <operation name="listAccountShadowOwner">
            <documentation>
                Returns the User object representing owner of specified account
                (account shadow).
                May return (null?? empty??) object if there is no owner
                specified for the account.

                May only be called with OID of AccountShadow object.

                Implements the backward "owns" assosciation between account
                shadow and user. Forward assiciation is implemented by property
                "account" of user object.

                This is a "list" operation even though it may return at most
                one owner. However the operation implies searching the repository
                for an owner, which may be less efficient that following a direct
                association. Hence it is called "list" to indicate that there
                may be non-negligible overhead.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format or wrong object type
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listAccountShadowOwnerInput" message="tns:listAccountShadowOwnerRequest"/>
            <output name="listAccountShadowOwnerOutput" message="tns:listAccountShadowOwnerResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listResourceObjectShadows">
            <documentation>
                Search for resource object shadows of a specified type that
                belong to the specified resource. Returns a list of such object
                shadows or empty list if nothing was found.

                Implements the backward "has" assosciation between resource and
                resource object shadows. Forward assiciation is implemented by
                property "resource" of resource object shadow.

                May only be called with OID of Resource object.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format or wrong object type
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listResourceObjectShadowsInput" message="tns:listResourceObjectShadowsRequest"/>
            <output name="listResourceObjectShadowsOutput" message="tns:listResourceObjectShadowsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

    </portType>
    <binding name="repositoryBinding" type="tns:repositoryPortType">
        <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="addObject">
            <soap:operation/>
            <input name="addObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="addObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getObject">
            <soap:operation/>
            <input name="getObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="getObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listObjects">
            <soap:operation/>
            <input name="listObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="listObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="searchObjects">
            <soap:operation/>
            <input name="searchObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="searchObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="modifyObject">
            <soap:operation/>
            <input name="modifyObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="modifyObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteObject">
            <soap:operation/>
            <input name="deleteObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="deleteObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getPropertyAvailableValues">
            <soap:operation/>
            <input name="getPropertyAvailableValuesInput">
                <soap:body use="literal"/>
            </input>
            <output name="getPropertyAvailableValuesOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listAccountShadowOwner">
            <soap:operation/>
            <input name="listAccountShadowOwnerInput">
                <soap:body use="literal"/>
            </input>
            <output name="listAccountShadowOwnerOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listResourceObjectShadows">
            <soap:operation/>
            <input name="listResourceObjectShadowsInput">
                <soap:body use="literal"/>
            </input>
            <output name="listResourceObjectShadowsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
    </binding>

</definitions>




