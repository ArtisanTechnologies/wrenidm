<?xml version="1.0" encoding="UTF-8"?>

<!--

Copyright (c) 2010 ForgeRock Inc. All Rights Reserved

The contents of this file are subject to the terms
of the Common Development and Distribution License
(the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at
http://www.opensource.org/licenses/cddl1.php or
OpenIDM/legal/CDDLv1.0.txt
See the License for the specific language governing
permission and limitations under the License.

When distributing Covered Code, include this CDDL
Header Notice in each file and include the License file
at OpenIDM/legal/CDDLv1.0.txt.
If applicable, add the following below the CDDL Header,
with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted 2010 [name of copyright owner]"

-->

<definitions name="model"
    targetNamespace="http://openidm.forgerock.com/xml/ns/public/model/model-1.wsdl"
    xmlns:tns="http://openidm.forgerock.com/xml/ns/public/model/model-1.wsdl"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:c="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd"
    xmlns:cw="http://openidm.forgerock.com/xml/ns/public/common/object-1.wsdl"
    xmlns:idm="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">

    <!-- Prefix "idm" defined above is all wrong! It is workaround for OPENIDM-124 -->

    <documentation>

        Interface of the IDM Model subsystem.
        
        TODO

        This interface is an extension of generic Object Access Interface. However due
        to the WSDL limitations some parts of the definition (e.g. operations)
        are copied&amp;pasted instead of re-used.

        Supported object types:
          All object types from Common Schema
          All object types from Identity Schema

    </documentation>


    <types>
        <xsd:schema targetNamespace="http://openidm.forgerock.com/xml/ns/public/model/model-1.wsdl">

            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd" schemaLocation="../common/common-1.xsd"/>

            <!-- This should import identity schema. But it deos not now. Workaround for OPENIDM-124 -->
            <!--
            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/identity/1#" schemaLocation="../repository/identity.xsd"/>
            -->

        </xsd:schema>
    </types>

    <!-- OBJECT messages -->

    <!-- Common messages
         Following messages should be in a separate WSDL file and imported here.
         But that does not work on OpenESB. Therefore good old copy&paste
         instead of import -->

        <message name="addObjectRequest">
        <part name="objectContainer" type="c:ObjectContainerType">
            <documentation>
                Container with the Objectto be created.
                OID attribute of the object may be empty.
            </documentation>
        </part>
    </message>
    <message name="addObjectResponse">
        <part name="oid" type="xsd:string">
            <documentation>
                OID assigned to the created object.
            </documentation>
        </part>
    </message>

    <message name="getObjectRequest">
        <part name="oid" type="xsd:string"/>
        <part name="resolve" type="c:PropertyReferenceListType"/>
    </message>
    <message name="getObjectResponse">
        <part name="objectContainer" type="c:ObjectContainerType"/>
    </message>

    <message name="listObjectsRequest">
        <part name="objectType" type="xsd:anyURI">
            <documentation>
                Object type to list.
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
    </message>
    <message name="listObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
    </message>

    <message name="searchObjectsRequest">
        <part name="query" type="c:QueryType">
            <documentation>
                Search criteria
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
    </message>
    <message name="searchObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
    </message>

    <message name="modifyObjectRequest">
        <part name="objectChange" type="c:ObjectModificationType"/>
    </message>
    <message name="modifyObjectResponse">
    </message>

    <message name="deleteObjectRequest">
        <part name="oid" type="xsd:string"/>
    </message>
    <message name="deleteObjectResponse">
    </message>

    <message name="getPropertyAvailableValuesRequest">
        <part name="oid" type="xsd:string"/>
        <part name="properties" type="c:PropertyReferenceListType"/>
    </message>
    <message name="getPropertyAvailableValuesResponse">
        <part name="propertyAvailableValuesList" type="c:PropertyAvailableValuesListType"/>
    </message>

    <message name="FaultMessage">
        <part name="fault" element="c:fault"/>
    </message>

    <!-- End of common messages -->

    <message name="listAccountShadowOwnerRequest">
        <part name="accountOid" type="xsd:string"/>
    </message>
    <message name="listAccountShadowOwnerResponse">
        <part name="userContainer" type="idm:UserContainerType"/>
    </message>

    <message name="listResourceObjectShadowsRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="resourceObjectShadowType" type="xsd:anyURI"/>
    </message>
    <message name="listResourceObjectShadowsResponse">
        <part name="resourceObjectShadowList" type="idm:ResourceObjectShadowListType"/>
    </message>

    <!-- Following two pairs of messages should not be here. They are in fact
         just diagnostics methods from the provisioning interface that need
         to be accessed from GUI. Do not use them for anything serious.
         The will disappear eventually. -->

    <message name="listResourceObjectsRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="objectType" type="xsd:anyURI">
            <documentation>
                Object type to list. Should be valid object class from the
                resource schema encoded in the URL form.
            </documentation>
        </part>
        <part name="paging" type="c:PagingType">
            <documentation>
                Parameters limiting the number of returned entries, offset, etc.
            </documentation>
        </part>
        <part name="result" type="c:OperationalResultType"/>
    </message>
    <message name="listResourceObjectsResponse">
        <part name="objectList" type="c:ObjectListType"/>
        <part name="result" type="c:OperationalResultType"/>
    </message>

    <message name="testResourceRequest">
        <part name="resourceOid" type="xsd:string"/>
    </message>
    <message name="testResourceResponse">
        <part name="result" type="c:ResourceTestResultType"/>
    </message>

    <message name="launchImportFromResourceRequest">
        <part name="resourceOid" type="xsd:string"/>
        <part name="objectClass" type="xsd:string">
            <documentation>
                Object class to import.
                Local name, assumed to be in the resource namespace.
            </documentation>
        </part>
    </message>
    <message name="launchImportFromResourceResponse">
        <part name="empty" type="c:EmptyType"/>
    </message>

    <message name="getImportStatusRequest">
        <part name="resourceOid" type="xsd:string"/>
    </message>
    <message name="getImportStatusResponse">
        <part name="status" type="c:TaskStatusType"/>
    </message>

    <portType name="modelPortType">

        <!-- OBJECT operations -->

        <operation name="addObject">
            <documentation>
                Add new object.

                The OID provided in the input message may be empty. In that case
                the OID will be assigned by the implementation of this method
                and it will be provided as return value.

                This operation should fail if such object already exists (if
                object with the provided OID already exists).

                The operation may fail if provided OID is in an unusable format
                for the storage. Generating own OIDs and providing them to this
                method is not recommended for normal operation.

                Should be atomic. Should not allow creation of two objects with
                the same OID (even if created in parallel).

                The operation may fail if the object to be created does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                Faults:
                  any SystemFaultType
                  ObjectAlreadyExistsFaultType
                  IllegalArgumentFaultType: wrong OID format
                  SchemaViolationFaultType: provided object violates datastore schema
            </documentation>
            <input name="addObjectInput" message="tns:addObjectRequest"/>
            <output name="addObjectOutput" message="tns:addObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getObject">
            <documentation>
                    Returns object for provided OID.
                    Must fail if object with the OID does not exists.

                    Reference resolution is SUPPORTED by this operation.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="getObjectInput" message="tns:getObjectRequest"/>
            <output name="getObjectOutput" message="tns:getObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listObjects">
            <documentation>
                    Returns all objects of specified type in the repository.
                    Not very practical, but good for now.
                    Will be improved later.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
            </documentation>
            <input name="listObjectsInput" message="tns:listObjectsRequest"/>
            <output name="listObjectsOutput" message="tns:listObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="searchObjects">
            <documentation>
                    Search for objects in the repository. Searches through all
                    object types. Returns a list of objects that match search
                    criteria.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      SchemaViolationFaultType: unknown property used in search query
            </documentation>
            <input name="searchObjectsInput" message="tns:searchObjectsRequest"/>
            <output name="searchObjectsOutput" message="tns:searchObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="modifyObject">
            <documentation>
                Modifies object using relative change description.
                Must fail if user with provided OID does not exists.
                Must fail if any of the described changes cannot be applied.
                Should be atomic.

                If two or more modify operations are executed in parallel, the
                operations should be merged. In case that the operations are in
                conflict (e.g. one operation adding a value and the other
                removing the same value), the result is not deterministic.

                The operation may fail if the modified object does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                TODO: optimistic locking

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
                      InapplicableOperationFaultType: decribed change is not applicable
                      SchemaViolationFaultType: resulting object would violate datastore schema
            </documentation>
            <input name="modifyObjectInput" message="tns:modifyObjectRequest"/>
            <output name="modifyObjectOutput" message="tns:modifyObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="deleteObject">
            <documentation>
                    Deleted object with provided OID.
                    Must fail if object with specified OID does not exists.
                    Should be atomic.

                    Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="deleteObjectInput" message="tns:deleteObjectRequest"/>
            <output name="deleteObjectOutput" message="tns:deleteObjectResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getPropertyAvailableValues">
            <documentation>
                Returns list of available values for specified properties.

                The returned values can be used as valid values for properties
                of the specific object. The provided values can be used e.g.
                for listing them in GUI list boxes, for early validation
                (pre-validation), displaying help messages, auto-complete, etc.

                In case the list of available values is too big or it is not
                available, the empty list should be returned, setting the
                "closed" flag to false.

                This optional operation is SUPPORTED by this interface.

                Faults:
                      any SystemFaultType
                      UnsupportedObjectTypeFaultType: specified object type is not supported by the interface
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="getPropertyAvailableValuesInput" message="tns:getPropertyAvailableValuesRequest"/>
            <output name="getPropertyAvailableValuesOutput" message="tns:getPropertyAvailableValuesResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <!-- Type-specific operations -->

        <operation name="listAccountShadowOwner">
            <documentation>
                Returns the User object representing owner of specified account
                (account shadow).
                May return (null?? empty??) object if there is no owner
                specified for the account.

                Implements the backward "owns" assosciation between account
                shadow and user. Forward assiciation is implemented by property
                "account" of user object.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listAccountShadowOwnerInput" message="tns:listAccountShadowOwnerRequest"/>
            <output name="listAccountShadowOwnerOutput" message="tns:listAccountShadowOwnerResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="listResourceObjectShadows">
            <documentation>
                Search for resource object shadows of a specified type that
                belong to the specified resource. Returns a list of such object
                shadows or empty list if nothing was found.

                Implements the backward "has" assosciation between resource and
                resource object shadows. Forward assiciation is implemented by
                property "resource" of resource object shadow.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listResourceObjectShadowsInput" message="tns:listResourceObjectShadowsRequest"/>
            <output name="listResourceObjectShadowsOutput" message="tns:listResourceObjectShadowsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

    <!-- Following two operations should not be here. They are in fact
         just diagnostics methods from the provisioning interface that need
         to be accessed from GUI. Do not use them for anything serious.
         The will disappear eventually. -->


        <operation name="listResourceObjects">
            <documentation>
                WARNING:
                    This operation should not be here. It is in fact
                    just a diagnostics methods from the provisioning interface
                    that need to be accessed from GUI. Do not use it for
                    anything serious. It will disappear eventually.
         
                Returns all objects of specified type that are available to the
                implementation.

                Returns empty list if object type is correct but there are no
                objects of that type.

                Should fail if object type is wrong (e.g. specified type is
                not part of resource schema).

                This method does NOT use any shadow objects for reference or any
                other business objects in the local repository. It goes directly
                to the resource.

                The returned objects (indirectly) complies with the resource
                schema, but it is returned re-formated in a form of detached
                shadow object. Although the form is the same as shadow object,
                this is NOT really a shadow object because it is not stored in
                the repository (it is detached). It does NOT have oid.

                The object is identified by whatever identification
                properties/attributes are defined by the resource schema.

                This method is not required to implement any form of caching,
                queueing, reference resolution or any other "smart" algorithm.

                any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      ProvisioningFaultType: ???


                Use of this method is not recommended if there is a way how to
                do the same using the standard "object access" methods. E.g.
                if accounts can be namipulated using account shadows, the
                shadows should be used. This method is provided only to support
                the rare case that an unknown resource object type should be
                used in business logic and for diagnostics reasons.
            </documentation>
            <input name="listResourceObjectsInput" message="tns:listResourceObjectsRequest"/>
            <output name="listResourceObjectsOutput" message="tns:listResourceObjectsResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>


        <operation name="testResource">
            <documentation>
                WARNING:
                    This operation should not be here. It is in fact
                    just a diagnostics methods from the provisioning interface
                    that need to be accessed from GUI. Do not use it for
                    anything serious. It will disappear eventually.

                Test the resouce connection and basic resource connector
                functionality.

                This operation will NOT raise fault in case the resource
                connection fails. It such case it will indicate the failure in
                the return message, but the operation itself succeeds.
                The operations fails only if the provided arguments are wrong,
                in case of system error, system misconfiguration, etc.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="testResourceInput" message="tns:testResourceRequest"/>
            <output name="testResourceOutput" message="tns:testResourceResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="launchImportFromResource">
            <documentation>
                Launch import task that will import all the accounts from the
                resource.

                WARNING: This operation is not considered public. It is a
                temporary solution until we have full-featured task management.
                It may be removed any time without a warning.

                DO NOT USE IT unless you are really sure you know what you
                are doing.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="launchImportFromResourceInput" message="tns:launchImportFromResourceRequest"/>
            <output name="launchImportFromResourceOutput" message="tns:launchImportFromResourceResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

        <operation name="getImportStatus">
            <documentation>
                Get the status report of the running or recently finished import
                task.

                WARNING: This operation is not considered public. It is a
                temporary solution until we have full-featured task management.
                It may be removed any time without a warning.

                DO NOT USE IT unless you are really sure you know what you
                are doing.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="getImportStatusInput" message="tns:getImportStatusRequest"/>
            <output name="getImportStatusOutput" message="tns:getImportStatusResponse"/>
            <fault name="fault" message="tns:FaultMessage">
                <documentation>
                    This is all wrong. Specific fault types should be there.
                    But because of Netbeans/JAXWS bug we need to do this ugliness.
                    Please see the list of fault types in operation documentation.
                </documentation>
            </fault>
        </operation>

    </portType>

    <binding name="modelBinding" type="tns:modelPortType">
        <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="addObject">
            <soap:operation/>
            <input name="addObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="addObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getObject">
            <soap:operation/>
            <input name="getObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="getObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listObjects">
            <soap:operation/>
            <input name="listObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="listObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="searchObjects">
            <soap:operation/>
            <input name="searchObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="searchObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="modifyObject">
            <soap:operation/>
            <input name="modifyObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="modifyObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteObject">
            <soap:operation/>
            <input name="deleteObjectInput">
                <soap:body use="literal"/>
            </input>
            <output name="deleteObjectOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getPropertyAvailableValues">
            <soap:operation/>
            <input name="getPropertyAvailableValuesInput">
                <soap:body use="literal"/>
            </input>
            <output name="getPropertyAvailableValuesOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listAccountShadowOwner">
            <soap:operation/>
            <input name="listAccountShadowOwnerInput">
                <soap:body use="literal"/>
            </input>
            <output name="listAccountShadowOwnerOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listResourceObjectShadows">
            <soap:operation/>
            <input name="listResourceObjectShadowsInput">
                <soap:body use="literal"/>
            </input>
            <output name="listResourceObjectShadowsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listResourceObjects">
            <soap:operation/>
            <input name="listResourceObjectsInput">
                <soap:body use="literal"/>
            </input>
            <output name="listResourceObjectsOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="testResource">
            <soap:operation/>
            <input name="testResourceInput">
                <soap:body use="literal"/>
            </input>
            <output name="testResourceOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="launchImportFromResource">
            <soap:operation/>
            <input name="launchImportFromResourceInput">
                <soap:body use="literal"/>
            </input>
            <output name="launchImportFromResourceOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getImportStatus">
            <soap:operation/>
            <input name="getImportStatusInput">
                <soap:body use="literal"/>
            </input>
            <output name="getImportStatusOutput">
                <soap:body use="literal"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
    </binding>
</definitions>



