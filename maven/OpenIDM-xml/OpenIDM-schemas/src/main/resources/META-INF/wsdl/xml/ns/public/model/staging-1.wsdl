<?xml version="1.0" encoding="UTF-8"?>

<!--

Copyright (c) 2010 ForgeRock Inc. All Rights Reserved

The contents of this file are subject to the terms
of the Common Development and Distribution License
(the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at
http://www.opensource.org/licenses/cddl1.php or
OpenIDM/legal/CDDLv1.0.txt
See the License for the specific language governing
permission and limitations under the License.

When distributing Covered Code, include this CDDL
Header Notice in each file and include the License file
at OpenIDM/legal/CDDLv1.0.txt.
If applicable, add the following below the CDDL Header,
with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted 2010 [name of copyright owner]"

-->

<definitions name="staging"
    targetNamespace="http://openidm.forgerock.com/xml/ns/public/model/staging-1.wsdl"
    xmlns:tns="http://openidm.forgerock.com/xml/ns/public/model/staging-1.wsdl"
    xmlns:exc="http://openidm.forgerock.com/xml/ns/public/common/exception-1.wsdl"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:c="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd"
    xmlns:idm="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">

    <!-- Prefix "idm" defined above is all wrong! It is workaround for OPENIDM-124 -->

    <documentation>
        TODO

    </documentation>

    <import namespace="http://openidm.forgerock.com/xml/ns/public/common/exception-1.wsdl" location="../common/exception-1.wsdl"/>
    <types>
        <xsd:schema targetNamespace="http://openidm.forgerock.com/xml/ns/public/model/staging-1.wsdl">

            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/public/common/common-1.xsd" schemaLocation="../common/common-1.xsd"/>
            <!-- This should import identity schema. But it deos not now. Workaround for OPENIDM-124 -->
            <!--
            <xsd:import namespace="http://openidm.forgerock.com/xml/ns/identity/1#" schemaLocation="../repository/identity.xsd"/>
            -->

        </xsd:schema>
    </types>

    <message name="createObjectStageRequest">
        <part name="objectType" type="xsd:anyURI"/>
    </message>
    <message name="createObjectStageResponse">
        <part name="stage" type="idm:ObjectStageType"/>
    </message>

    <message name="getObjectStageRequest">
        <part name="oid" type="xsd:string"/>
        <part name="resolve" type="c:PropertyReferenceListType"/>
    </message>
    <message name="getObjectStageResponse">
        <part name="stage" type="idm:ObjectStageType"/>
    </message>

    <message name="submitObjectStageRequest">
        <part name="stage" type="idm:ObjectStageType"/>
    </message>
    <message name="submitObjectStageResponse">
        <part name="oid" type="xsd:string"/>
    </message>

    <message name="addUserStageAccountRequest">
        <part name="stage" type="idm:ObjectStageType"/>
        <part name="resourceOid" type="xsd:string"/>
    </message>
    <message name="addUserStageAccountResponse">
        <part name="stage" type="idm:ObjectStageType"/>
    </message>

    <portType name="stagingPortType">

        <operation name="createObjectStage">
            <documentation>
                    Returns empty object stage for new object.

                    Submitting this stage results in "add" action on the object.

                    WARNING: just an idea, not thought over

                    TODO: handling of unknown types.
            </documentation>
            <input name="createObjectStageInput" message="tns:createObjectStageRequest"/>
            <output name="createObjectStageOutput" message="tns:createObjectStageResponse"/>
        </operation>

        <operation name="getObjectStage">
            <documentation>
                    Returns object stage for provided OID.
                    Must fail if object with the OID does not exists.

                    Submitting this stage results in "modify" action on the
                    object.
            </documentation>
            <input name="getObjectStageInput" message="tns:getObjectStageRequest"/>
            <output name="getObjectStageOutput" message="tns:getObjectStageResponse"/>
        </operation>

        <operation name="submitObjectStage">
            <documentation>
                Submits modified state to process any changes.
                TODO

                WARNING: This may not complete the operation immediately
                (in case of approvals or async provisioning). But the flow in
                such a case is still TBD.
            </documentation>
            <input name="submitObjectStageInput" message="tns:submitObjectStageRequest"/>
            <output name="submitObjectStageOutput" message="tns:submitObjectStageResponse"/>
        </operation>

        <!-- Type-specific operations -->

        <operation name="addUserStageAccount">
            <documentation>
                Adds account to the existing user stage.
                Works only on stages created for UserType objects.
                TODO
            </documentation>
            <input name="addUserStageAccountInput" message="tns:addUserStageAccountRequest"/>
            <output name="addUserStageAccountOutput" message="tns:addUserStageAccountResponse"/>
        </operation>

        <!-- Something like "addUserStageRole" operation will be added later -->

    </portType>
    <binding name="stagingBinding" type="tns:stagingPortType">
        <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="createObjectStage">
            <soap:operation/>
            <input name="createObjectStageInput">
                <soap:body use="literal"/>
            </input>
            <output name="createObjectStageOutput">
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="getObjectStage">
            <soap:operation/>
            <input name="getObjectStageInput">
                <soap:body use="literal"/>
            </input>
            <output name="getObjectStageOutput">
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="submitObjectStage">
            <soap:operation/>
            <input name="submitObjectStageInput">
                <soap:body use="literal"/>
            </input>
            <output name="submitObjectStageOutput">
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="addUserStageAccount">
            <soap:operation/>
            <input name="addUserStageAccountInput">
                <soap:body use="literal"/>
            </input>
            <output name="addUserStageAccountOutput">
                <soap:body use="literal"/>
            </output>
        </operation>
    </binding>
</definitions>



